// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.ArTiJaBr.subsystems;


import com.revrobotics.CANEncoder;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.usfirst.frc5505.ArTiJaBr.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Ultrasonic;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;






/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private CANSparkMax sparkMax1;
    private CANSparkMax sparkMax2;
    private CANSparkMax sparkMax3;
    private CANSparkMax sparkMax4;
    private RobotDrive robotDrive41;
    private DoubleSolenoid shifterSolenoid;
    private CANEncoder rightEncoder;
    private CANEncoder leftEncoder;
    private Ultrasonic leftUltra = new Ultrasonic(0,1);
    private Ultrasonic rightUltra = new Ultrasonic(2,3);
    private ADXRS450_Gyro FRCGyro = new ADXRS450_Gyro();

    public boolean isDriverControlMode = true;
    public double X1 = 0;
    public double X2 = 0;
    public double Y1 = 0;
    public double Y2 = 0;
    public double LineAngle = 0;
    public double LineLength = 0;
    public double midpointX;
    public double midpointY;
    public boolean AreThereLines = false;

    public driveTrain() {

        sparkMax1 = new CANSparkMax(1, MotorType.kBrushless);
        
        
        
        sparkMax2 = new CANSparkMax(2, MotorType.kBrushless);
        
        
        
        sparkMax3 = new CANSparkMax(3, MotorType.kBrushless);
        
        
        
        sparkMax4 = new CANSparkMax(4, MotorType.kBrushless);
        
        
        
        leftEncoder = new CANEncoder(sparkMax1);

        rightEncoder = new CANEncoder(sparkMax4);

        robotDrive41 = new RobotDrive(sparkMax1, sparkMax2,
        sparkMax3, sparkMax4);
        
        robotDrive41.setSafetyEnabled(false);
        robotDrive41.setExpiration(0.1);
        robotDrive41.setSensitivity(0.5);
        robotDrive41.setMaxOutput(1.0);

        shifterSolenoid = new DoubleSolenoid(0, 0, 1);
            addChild("Climber Solenoid 1", shifterSolenoid);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveBase());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Line Angle", LineAngle);
        SmartDashboard.putNumber("X1", X1);
        SmartDashboard.putNumber("X2", X2);
        SmartDashboard.putNumber("Y1", Y1);
        SmartDashboard.putNumber("Y2", Y2);
        SmartDashboard.putNumber("Right Encoder", rightEncoder.getPosition());
        SmartDashboard.putNumber("Left Encoder", leftEncoder.getPosition());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void driveBase(Joystick stick) {
        if (isDriverControlMode = true) {
            double reduction = 1;
            robotDrive41.tankDrive(stick.getRawAxis(1)*reduction, stick.getRawAxis(5)*reduction);
        }
    }

    public void shift() {
        System.out.println("Shifitng Command Started");
        if (shifterSolenoid.get() != Value.kForward) {
            shifterSolenoid.set(Value.kForward);
            System.out.println("Shifted Forward");
        } else {
            shifterSolenoid.set(Value.kReverse);
            System.out.println("Shifted Backward");
        }
    }

    public boolean wallAllignAndDrive(double speed) {
        double difference = leftUltra.getRangeInches() - rightUltra.getRangeInches();
        if (difference > 1) {
            // Need to turn right
            robotDrive41.tankDrive(speed, -speed);
            return false;
        } else if (difference < -1) {
            // Need to turn left
            robotDrive41.tankDrive(-speed, speed);
            return false;
        } else {
            // Within Margin of Error
            double averageDistance = (leftUltra.getRangeInches() + rightUltra.getRangeInches()) / 2;
            if (averageDistance > 5) {
                // Drive Forward
                robotDrive41.tankDrive(speed, speed);
                return false;
            } else {
                // Stop
                robotDrive41.tankDrive(0, 0);
                isDriverControlMode = true;
                return true;
            }
        }
    }

    public void alignToLine(double speed) {
        if (AreThereLines) {
            midpointX = ((((X2 - X1) / 2)) + X1);
            midpointY = ((((Y2 - Y1) / 2)) + Y1);
            double offset = midpointX - 120;
            if (offset > 10) {
                //Move left by some vudu magic
                driveStraight(-1);
            } else if (offset < 10) {
                //Move Right by crazier vudu magic
            } else {
                //You done BRO
            }
        }
    }

    public void turn(double speed) {
        robotDrive41.tankDrive(speed, -speed);
    }

    public void driveStraight(double speed) {
        robotDrive41.tankDrive(speed, speed);
    }

    public void stop() {
        robotDrive41.tankDrive(0, 0);
    }

    public double getAngle() {
        return FRCGyro.getAngle();
    }

    public void zeroGyro() {
        FRCGyro.calibrate();
    }

    public double getLeftEncoder() {
        return leftEncoder.getPosition();
    }

    //Run by Robot.java to send vars to driveTrain
    public void getX1(double x1) {
        X1 = x1;
    }
    public void getX2(double x2) {
        X2 = x2;
    }
    public void getY1(double y1) {
        Y1 = y1;
    }
    public void getY2(double y2) {
        Y2 = y2;
    }
    public void getLineAngle(double lineAngle) {
        LineAngle = lineAngle;
    }
    public void getLineLength(double lineLenght) {
        LineLength = lineLenght;
    }
    public void areThereLines(boolean areThereLines) {
        AreThereLines = areThereLines;
    }
    //////////////////////////////////////////////
}

